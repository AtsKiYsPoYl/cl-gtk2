<?xml version="1.0" encoding="utf-8"?>
<article>
  <articleinfo>
    <title>CL-GTK2 Tutorial</title>
    <author>
      <personname>
        <firstname>Dmitry</firstname>
        <surname>Kalyanov</surname>
      </personname>
    </author>
  </articleinfo>
  <section>
    <title>TODO</title>
    <para>Introduction</para>
    <para>More involved example: simple text editor</para>
    <para>More involved example walk-through: widgets, properties, packing, child properties</para>
    <para>TreeView example</para>
  </section>
  <section>
    <title>Installation</title>
    <para>Unpack the CL-GTK2 sources, and add them to <varname>asdf:*central-registry*</varname>:</para>
    <programlisting>
      (push "/path/to/cl-gtk2/glib/" asdf:*central-registry*)
      (push "/path/to/cl-gtk2/gdk/" asdf:*central-registry*)
      (push "/path/to/cl-gtk2/gtk/" asdf:*central-registry*)
    </programlisting>
  </section>
  <section>
    <title>"Hello world" example</title>
    <para>Let's start from a simple example.</para>
    <graphic fileref="hello_world.png"/>
    <para>Load the GTK system: <programlisting>(asdf:oos 'asdf:load-op :gtk)</programlisting></para>
    <para>Having loaded the GTK system, compile the following code:</para>
    <programlisting linenumbering="numbered">
(defpackage :gtk-hello
  (:use :cl :gtk :gobject :glib)
  (:export :run))

(in-package :gtk-hello)

(defun run ()
  (let ((output *standard-output*))
    (with-main-loop
        (let ((window (make-instance 'gtk-window
                                     :type :toplevel
                                     :window-position :center
                                     :title "Hello world!"
                                     :default-width 300
                                     :default-height 100))
              (button (make-instance 'button :label "Hello, world!"))
              (counter 0))
          (g-signal-connect button "clicked"
                            (lambda (b)
                              (declare (ignore b))
                              (format output "Hello, world!~%")
                              (setf (button-label button)
                                    (format nil
                                            "Hello, world! (clicked ~D times)"
                                            (incf counter)))))
          (container-add window button)
          (widget-show window :all t)))))
    </programlisting>
    <para>And now, run it:<programlisting>(gtk-hello:run)</programlisting></para>
    <para>This code should create a form with a button. When the button is clicked, this program prints a message to standard output and changes the text of the button.</para>
    <para>If you have a window, then congratulations! Otherwise, contact the author for support.</para>
  </section>
  <section>
    <title>Example walk-through</title>
    <para>Let's analyze the example step by step.</para>
    <para>CL-GTK2 runs the Gtk main loop in background thread. This is done so you could have your application running and interacting with the Lisp system through the REPL.</para>
    <para>To execute some code and ensure that Gtk+ main loop is started, WITH-MAIN-LOOP macro is used. It runs the body of code within the Gtk+ main loop. Because all calls to Gtk+ functions require locking, it is neccessary to run this code from th main loop. Because we are running the code in another thread, its dynamic bindings (including *standard-output*) will be lost. To be able to print at REPL, we save reference to the standard output stream in the closure.</para>
    <para>Gtk+ objects are created with make-instance and are properly garbage-collected. Some properties (slots) of objects are constructor-only properties and can only be set at object construction time. For example, "type" property of GtkWindow can only be set during its creation.</para>
    <para>Call to container-add puts button as a child widget into window, and widget-show shows all widgets of window.</para>
    <para>In Gtk+, objects have "signals", to which handlers can be attached. When something happens that results in "emitting" the signal (e.g., button being clicked emits "clicked" signal), all handlers of this signal are called. Handler of GtkButton's "clicked" signal has only one argument - the button that was clicked. CL-GTK2 allows attaching any function (including closures) as signal handlers and ensures that closure is freed properly.</para>
  </section>
</article>
